Deploy Concourse with BOSH
### What?
[Concourse](http://concourse.ci/) is a Pivotal-sponsored, pipeline-based, continuous integration and deployment (CI/CD) system. The "pipelines" are a collection of [three core concepts (jobs, tasks, and resources)](http://concourse.ci/concepts.html) that you'll learn more about in upcoming stories. While CI may call to mind test automation, Pivotal teams use it for so much more than that. Take a stroll around the office and check out the jobs up on the CI screens to get a general idea of how broadly we use it to automate all that is automate-able.

### How?
You already have a Bosh Director, a cloud-config, and at least one stemcell, so to spin up a full Concourse deployment all you have to do is prepare your deployment manifest. Clone this [repo](https://github.com/concourse/concourse-deployment) and follow **[these instructions](https://github.com/cloudfoundry/bosh-bootloader/blob/master/docs/concourse.md)** to set it up and Bosh deploy, but as per the yooj there's a small set of additional instructions...

**Pre-deploy**
`bbl` only supports one load balancer at a time so in lieu of depriving our CF deployment of its lb, we're going to have Concourse go without. To do this:
1. Omit `tls_bind_port`, `tls_cert`, and `tls_key` attributes from your Concourse manifest.
1. Replace them with `bind_port: 80`

Also, register a new domain on Freenom. Don't do any configuration yet.

**Post-deploy**
 Once `bosh -d concourse deploy concourse.yml` is finished running, reserve a static IP address through GCP and attach it to your web VM (you can find its VM CID by running `bosh -d concourse vms`).

Then, on Freenom go to Services > My Domains > Manage Domain > Manage Freenom DNS and create an A record that targets the static IP you just attached to your Concourse web VM.
In GCP, go to Compute Engine > VM instances > the VM with your concourse deployment, and check 'Allow HTTP traffic' under Firewalls.

### Troubleshooting
1. Did you remember to include `http://` in the domain provided as the `external_url` of the `atc` job?
1. Double-check that you're visiting the `http://` address in your browser.
1. Try `bosh ssh`ing into your web VM and curling localhost. It should return the html for your pipeline-less Concourse webpage. If it does, then your problem is with routing/DNS, not with Concourse itself.
1. If you hit an IP quota, go to Home > IAM & Admin > Quotas in your GCP dashboard and click the ✏  button. This will take you to a form where you can request an increased quota.
1. If this ends up being frustrating in a "please, please don't make me do another minute" kind of way, no sweat. Don't waste time on a story you're not getting anything out of, just _Choose Your Own Adventure_ your way out of it by **[spinning up a local VM with `bosh create-env` and VirtualBox](http://concourse.ci/single-page.html#concourse-lite)**. Either way, same result →

### Expected Result
![Lonely Concourse, no pipelines](http://engineering.pivotal.io/images/concourse-000/no_pipelines.png)

### Resources
[How to setup A, MX, CNAME or other records for a domain name on Freenom](https://my.freenom.com/knowledgebase.php?action=displayarticle&id=4)
[Terraform + Google Cloud Platform docs](https://www.terraform.io/docs/providers/google/index.html)
[Concourse Architecture Overview](https://concourse.ci/architecture.html)
[All About Concourse for Continuous Integration (video)](https://blog.pivotal.io/pivotal-perspectives/features/all-about-concourse-for-continuous-integration)
[BOSH 2.0: The Evolution - YouTube (video)](https://www.youtube.com/watch?v=Q5uvoL1OqSw)
[YAML Validator](http://codebeautify.org/yaml-validator)

### Relevant Repos and Teams
**Concourse:** [concourse/concourse](https://github.com/concourse/concourse)
L: concourse
---
Download and hook up your Concourse CLI
### What?
Now that you have Concourse deployed, the first thing you'll want to do is download the `fly` CLI and authenticate with your target. This is done with the `fly login` command. The login command serves double duty: it authenticates with a given endpoint  and saves it under a more convenient name. The name and token are stored in ~/.flyrc (though you shouldn't really edit the file manually).

### How?
1. Download the `fly` CLI from the "no pipelines configured" page.
1. Move it to your computer's $PATH and make it executable.
1. Run `fly login --help` for instructions to login to Concourse.

### Expected Result
You successfully enter your credentials and the CLI prints "target saved."

### Resources
[Fly login documentation](https://concourse.ci/fly-login.html)

### Relevant Repos and Teams
[concourse/fly](https://github.com/concourse/fly)
L: concourse
---
Create a pipeline with a single job
### What?
Every great Concourse behemoth of the 21st century started in the same place as yours is about to: with an empty `pipeline.yml`. You can kick it off with as little as a single, manually-triggered job.

### How?
1. Set up a `jobs:` section.
1. Define a **[job](https://concourse.ci/concepts.html#jobs)** with a name and a [plan](http://concourse.ci/build-plans.html).
1. Give the job a task that you define inline, in the pipeline itself (this is good to know how to do to test new configurations quickly).
1. "fly" your pipeline using the `fly` CLI.

### Expected Result
A job that always goes green. How idyllic.

### Resources
[Configuring a Job](http://concourse.ci/configuring-jobs.html)
[Build Plans](http://concourse.ci/build-plans.html)
[Pipeline Mechanics](http://concourse.ci/pipeline-mechanics.html)
L: concourse
---
Add a Git resource to the pipeline
### What?
A  **[resource](http://concourse.ci/concepts.html#resources)** is any entity that can be checked for new versions, pulled down at a specific version, and/or pushed up to idempotently create new versions. A few of the usual suspects are [listed here](http://concourse.ci/resource-types.html). They include a number of ideas that you're used to thinking of in terms of versioning (`git resource`, `git-release resource`, `tracker resource`, etc.), but also a few that you might not be, like `time`.

The [`git resource`](https://github.com/concourse/git-resource) tracks the commits in a git repository and, though I have no numbers on this, I expect it's the most commonly used Concourse resource. And you can have one of your very own!

### How?
Create a repo to house your Concourse code (`pipeline.yml` etc.) and set up a [git resource](https://github.com/concourse/git-resource) that fetches it. It will be useful to have access to this once we add tasks and a Dockerfile that you'll want to reference in your pipeline. Move your inline task to a yaml file and either a Bash or Ruby script in that repo.

### Expected Result
A one job, one resource pipeline that is always green.

### Resources
[Pipeline Mechanics](http://concourse.ci/pipeline-mechanics.html)
[Common Concourse "resources"](http://concourse.ci/concepts.html#resources)
L: concourse
---
Add a docker-image resource to the pipeline
### What?
Another popular Concourse resource is the **[`docker-image` resource](https://github.com/concourse/docker-image-resource)**. It's useful for providing a reproducible environment for your tests and builds with all of the dependencies a growing pipeline needs to succeed.

### How?
1. Write a simple Dockerfile.
1. Upload it to the DockerHub registry (if you do not have an account, create one at this point).
1. Set up the `docker-image` resource to fetch it.
1. Use it as the [image resource](http://concourse.ci/single-page.html#image_resource) in your task.

### Resources
[Docker-image resource repo](https://github.com/concourse/docker-image-resource)
[Get Started with Docker](https://docs.docker.com/get-started/)
- [ ] Create DockerFile
L: concourse
---
[RELEASE] Concourse ⇧
